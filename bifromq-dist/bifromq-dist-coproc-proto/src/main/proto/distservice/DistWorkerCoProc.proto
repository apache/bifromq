/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "commontype/TopicMessage.proto";
import "distservice/TopicFanout.proto";
import "distservice/MatchRoute.proto";

option java_multiple_files = true;
option java_package = "org.apache.bifromq.dist.rpc.proto";
option java_outer_classname = "DistCoProcProtos";

package distservice;

message TenantOption{
  uint32 maxReceiversPerSharedSubGroup = 1;
}

message BatchMatchRequest {
  message TenantBatch {
    repeated MatchRoute route = 1; // deduplicated list
    TenantOption option = 2;
  }
  uint64 reqId = 1;
  map<string, TenantBatch> requests = 2; // key: tenantId
}

message BatchMatchReply {
  message TenantBatch {
    enum Code{
      OK = 0;
      EXCEED_LIMIT = 1; // only for group join
    }
    repeated Code code = 1; // the order is same as the input
  }
  uint64 reqId = 1;
  map<string, TenantBatch> results = 2; // key: tenantId
}

message BatchUnmatchRequest {
  message TenantBatch {
    repeated MatchRoute route = 1; // deduplicated list
  }

  uint64 reqId = 1;
  map<string, TenantBatch> requests = 2; // key: tenantId
}

message BatchUnmatchReply {
  message TenantBatch {
    enum Code{
      OK = 0;
      NOT_EXISTED = 1;
    }
    repeated Code code = 1; // the order is same as the input
  }
  uint64 reqId = 1;
  map<string, TenantBatch> results = 2; // key: tenantId
}
message DistPack{
  string tenantId = 1;
  repeated commontype.TopicMessagePack msgPack = 2; // topic messages packs shares same tenantId
}

message BatchDistRequest {
  uint64 reqId = 1;
  repeated DistPack distPack = 2; // sorted by tenantId and topic
  string orderKey = 3;
}

message BatchDistReply {
  uint64 reqId = 1;
  map<string, TopicFanout> result = 2;
}

message GCRequest {
  uint64 reqId = 1;
}

message GCReply {
  uint64 reqId = 1;
}

message DistServiceRWCoProcInput{
  oneof type{
    BatchMatchRequest batchMatch = 1;
    BatchUnmatchRequest batchUnmatch = 2;
  }
}

message DistServiceRWCoProcOutput{
  oneof type{
    BatchMatchReply batchMatch = 1;
    BatchUnmatchReply batchUnmatch = 2;
  }
}

message DistServiceROCoProcInput{
  oneof Input{
    BatchDistRequest batchDist = 1;
    GCRequest gc = 2;
  }
}

message DistServiceROCoProcOutput{
  oneof Output{
    BatchDistReply batchDist = 1;
    GCReply gc = 2;
  }
}


