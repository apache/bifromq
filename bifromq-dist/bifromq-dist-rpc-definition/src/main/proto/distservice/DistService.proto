/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "commontype/RouteMatcher.proto";
import "commontype/TopicMessage.proto";

option java_multiple_files = true;
option java_package = "org.apache.bifromq.dist.rpc.proto";
option java_outer_classname = "DistServiceProtos";

package distservice;

service DistService {
  rpc match (MatchRequest) returns (MatchReply);
  rpc unmatch (UnmatchRequest) returns (UnmatchReply);
  rpc dist (stream DistRequest) returns (stream DistReply);
}

message MatchRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  commontype.RouteMatcher matcher = 3;
  uint32 brokerId = 4;
  string receiverId = 5;
  string delivererKey = 6;
  uint64 incarnation = 7;
}

message MatchReply {
  enum Result {
    OK = 0;
    EXCEED_LIMIT = 1;
    BACK_PRESSURE_REJECTED = 2;
    TRY_LATER = 3;
    ERROR = 4;
  }
  uint64 reqId = 1;
  Result result = 2;
}

message UnmatchRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  commontype.RouteMatcher matcher = 3;
  uint32 brokerId = 4;
  string receiverId = 5;
  string delivererKey = 6;
  uint64 incarnation = 7;
}

message UnmatchReply {
  enum Result {
    OK = 0;
    NOT_EXISTED = 1;
    BACK_PRESSURE_REJECTED = 2;
    TRY_LATER = 3;
    ERROR = 4;
  }
  uint64 reqId = 1;
  Result result = 2;
}

message DistRequest {
  uint64 reqId = 1;
  repeated commontype.PublisherMessagePack messages = 2;
}

message DistReply {
  enum Code{
    OK = 0;
    BACK_PRESSURE_REJECTED = 1;
    TRY_LATER = 2;
    ERROR = 3;
  }
  message DistResult {
    map<string, uint32> topic = 1; // fan-out number
  }
  uint64 reqId = 1;
  Code code = 2;
  repeated DistResult results = 3;
}