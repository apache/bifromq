syntax = "proto3";
import "commontype/QoS.proto";
import "commontype/ClientInfo.proto";
import "commontype/SubInfo.proto";
import "commontype/TopicMessage.proto";
import "inboxservice/InboxFetched.proto";
import "inboxservice/InboxCoProc.proto";

option java_multiple_files = true;
option java_package = "com.baidu.bifromq.inbox.rpc.proto";
option java_outer_classname = "InboxServiceProtos";

package inboxservice;

service InboxService {
  rpc get (GetRequest) returns (GetReply);
  rpc attach (AttachRequest) returns (AttachReply);
  rpc detach (DetachRequest) returns (DetachReply);
  rpc create (CreateRequest) returns (CreateReply);
  rpc touch (TouchRequest) returns (TouchReply);
  rpc sub(SubRequest) returns (SubReply);
  rpc unsub(UnsubRequest) returns (UnsubReply);
  rpc receive (stream SendRequest) returns (stream SendReply);
  rpc fetch(stream InboxFetchHint) returns (stream InboxFetched);
  rpc commit(CommitRequest) returns(CommitReply);

  rpc expire (ExpireRequest) returns (ExpireReply);
  rpc expireAll (ExpireAllRequest) returns (ExpireAllReply);
}

message GetRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  string inboxId = 3;
  uint64 now = 4;
}

message GetReply {
  enum Code{
    EXIST = 0;
    NO_INBOX = 1;
    ERROR = 2;
  }
  uint64 reqId = 1;
  Code code = 2;
  repeated inboxservice.InboxVersion inbox = 3; // available when code = EXIST
}

message AttachRequest {
  uint64 reqId = 1;
  string inboxId = 2;
  uint64 incarnation = 3;
  uint64 version = 4;
  uint32 expirySeconds = 5;
  uint32 keepAliveSeconds = 6;
  optional inboxservice.LWT lwt = 7;
  commontype.ClientInfo client = 8; // the owner client
  uint64 now = 9;
}

message AttachReply {
  enum Code {
    OK = 0;
    NO_INBOX = 1;
    CONFLICT = 2;
    ERROR = 3;
  }
  uint64 reqId = 1;
  Code code = 2;
  repeated string topicFilters = 3; // existing subscriptions
}

message DetachRequest {
  uint64 reqId = 1;
  string inboxId = 2;
  uint64 incarnation = 3;
  uint64 version = 4;
  uint32 expirySeconds = 5;
  bool discardLWT = 6;
  commontype.ClientInfo client = 7;
  uint64 now = 8;
}

message DetachReply {
  enum Code {
    OK = 0;
    NO_INBOX = 1;
    CONFLICT = 2;
    ERROR = 3;
  }
  uint64 reqId = 1;
  Code code = 2;
  repeated string topicFilters = 3; // existing subscriptions
  optional LWT lwt = 4; // the lwt to trigger if not being discard
}

message CreateRequest {
  uint64 reqId = 1;
  string inboxId = 2;
  uint64 incarnation = 3;
  uint32 expirySeconds = 4;
  uint32 keepAliveSeconds = 5;
  uint32 limit = 6;
  bool dropOldest = 7;
  optional inboxservice.LWT lwt = 8;
  commontype.ClientInfo client = 9;
  uint64 now = 10;
}

message CreateReply {
  enum Code {
    OK = 0;
    ERROR = 1;
  }
  uint64 reqId = 1;
  Code code = 2;
}

message TouchRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  string inboxId = 3;
  uint64 incarnation = 4;
  uint64 version = 5;
  uint64 now = 6;
}

message TouchReply {
  enum Code {
    OK = 0;
    NO_INBOX = 1;
    CONFLICT = 2;
    ERROR = 3;
  }
  uint64 reqId = 1;
  Code code = 2;
}

message ExpireRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  string inboxId = 3;
  uint64 now = 4;
}

message ExpireReply {
  enum Code {
    OK = 0;
    NOT_FOUND = 1;
    ERROR = 2;
  }
  uint64 reqId = 1;
  Code code = 2;
}

message SubRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  string inboxId = 3;
  uint64 incarnation = 4;
  uint64 version = 5;
  string topicFilter = 6;
  commontype.QoS subQoS = 7;
  uint64 now = 8;
}

message SubReply {
  enum Code {
    OK = 0;
    EXISTS = 1;
    NO_INBOX = 2;
    EXCEED_LIMIT = 3;
    CONFLICT = 4;
    ERROR = 5;
  }
  uint64 reqId = 1;
  Code code = 2;
}

message UnsubRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  string inboxId = 3;
  uint64 incarnation = 4;
  uint64 version = 5;
  string topicFilter = 6;
  uint64 now = 7;
}

message UnsubReply {
  enum Code {
    OK = 0;
    NO_INBOX = 1;
    NO_SUB = 2;
    CONFLICT = 3;
    ERROR = 4;
  }
  uint64 reqId = 1;
  Code code = 2;
}

message SendRequest {
  message Params{
    commontype.TopicMessagePack messages = 1;
    repeated commontype.SubInfo subInfo = 2;
  }
  uint64 reqId = 1;
  repeated Params params = 2;
}

message SendReply {
  enum Code {
    OK = 0;
    NO_INBOX = 1;
    ERROR = 2;
  }
  message Result{
    commontype.SubInfo subInfo = 1;
    Code code = 2;
  }
  uint64 reqId = 1;
  repeated Result result = 2;
}

message InboxFetchHint {
  uint64 sessionId = 1;
  string inboxId = 2;
  uint64 incarnation = 3;
  int32 capacity = 4;
  uint64 lastFetchQoS0Seq = 5;
  uint64 lastFetchQoS1Seq = 6;
  uint64 lastFetchQoS2Seq = 7;
}

message InboxFetched{
  uint64 sessionId = 1;
  string inboxId = 2;
  uint64 incarnation = 3;
  Fetched fetched = 4;
}

message CommitRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  string inboxId = 3;
  uint64 incarnation = 4;
  uint64 version = 5;
  commontype.QoS qos = 6;
  uint64 upToSeq = 7;
  uint64 now = 8;
}

message CommitReply {
  enum Code {
    OK = 0;
    NO_INBOX = 1;
    CONFLICT = 2;
    ERROR = 3;
  }
  uint64 reqId = 1;
  Code code = 2;
}

message ExpireAllRequest {
  uint64 reqId = 1;
  string tenantId = 2;
  uint32 expirySeconds = 3;
  uint64 now = 4;
}

message ExpireAllReply {
  enum Code {
    OK = 0;
    ERROR = 1;
  }
  uint64 reqId = 1;
  Code code = 2;
}
